#
# 二分查找
# @param n int整型 数组长度
# @param v int整型 查找值
# @param a int整型一维数组 有序数组
# @return int整型
#
class Solution:
    def upper_bound_(self, n, v, a):
        if a[-1] < v:
            return len(a)+1
        else:
            l=0
            r=n-1
            while(l<=r):
                m = (l+r) // 2
                if(a[m] >= v):
                    r = m
                else:
                    l = m+1
            return l+1
a = Solution()
# print(a.upper_bound_(100,100,[2,3,3,4,4,5,5,5,6,6,7,7,9,9,9,10,10,12,14,16,17,18,18,18,19,22,23,23,26,26,26,26,28,28,29,29,29,32,33,35,36,38,39,39,40,41,46,47,47,47,49,50,54,55,55,55,56,57,57,58,58,58,59,61,61,62,62,62,62,63,63,67,67,69,70,70,71,72,74,75,76,79,84,85,85,86,89,92,93,93,93,94,94,95,97,97,97,97,97,99]))
print(a.upper_bound_(5,3,[1,2,4,5,6]))
